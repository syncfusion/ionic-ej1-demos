import 'syncfusion-javascript/Scripts/ej/datavisualization/ej.diagram.min';
import { EJComponents, ArrayTagElement, ComplexTagElement } from './core';
import { EventEmitter, IterableDiffers, KeyValueDiffers, Type, ElementRef, ChangeDetectorRef } from '@angular/core';
export declare class DiagramCommandManagerCommandDirective extends ComplexTagElement {
    canExecute: any;
    execute: any;
    gesture: any;
    gesture_key: any;
    gesture_keyModifiers: any;
    parameter: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramCommandManagerCommandsDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramSegmentDirective extends ComplexTagElement {
    direction: any;
    length: any;
    point: any;
    point1: any;
    point2: any;
    type: any;
    vector1: any;
    vector2: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramSegmentsDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramConnectorLabelDirective extends ComplexTagElement {
    alignment: any;
    bold: any;
    borderColor: any;
    borderWidth: any;
    boundaryConstraints: any;
    constraints: any;
    fillColor: any;
    fontColor: any;
    fontFamily: any;
    fontSize: any;
    height: any;
    horizontalAlignment: any;
    hyperlink: any;
    italic: any;
    mode: any;
    name: any;
    offset: any;
    margin: any;
    margin_right: any;
    margin_left: any;
    margin_top: any;
    margin_bottom: any;
    padding: any;
    dragLimit: any;
    dragLimit_right: any;
    dragLimit_left: any;
    dragLimit_top: any;
    dragLimit_bottom: any;
    opacity: any;
    readOnly: any;
    relativeMode: any;
    rotateAngle: any;
    segmentOffset: any;
    text: any;
    textAlign: any;
    textDecoration: any;
    verticalAlignment: any;
    visible: any;
    width: any;
    wrapping: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramConnectorLabelsDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramConnectorDirective extends ComplexTagElement {
    addInfo: any;
    bridgeSpace: any;
    constraints: any;
    cornerRadius: any;
    cssClass: any;
    horizontalAlign: any;
    labels: any;
    lineColor: any;
    lineDashArray: any;
    lineHitPadding: any;
    lineWidth: any;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    name: any;
    opacity: any;
    paletteItem: any;
    parent: any;
    segments: any;
    shape: any;
    shape_type: any;
    shape_flow: any;
    shape_association: any;
    shape_message: any;
    shape_sequence: any;
    shape_relationship: any;
    shape_multiplicity: any;
    shape_multiplicity_type: any;
    shape_multiplicity_source: any;
    shape_multiplicity_source_optional: any;
    shape_multiplicity_source_lowerBounds: any;
    shape_multiplicity_source_upperBounds: any;
    shape_multiplicity_target: any;
    shape_ActivityFlow: any;
    sourceDecorator: any;
    sourceDecorator_borderColor: any;
    sourceDecorator_borderWidth: any;
    sourceDecorator_cssClass: any;
    sourceDecorator_fillColor: any;
    sourceDecorator_height: any;
    sourceDecorator_pathData: any;
    sourceDecorator_shape: any;
    sourceDecorator_width: any;
    sourceNode: any;
    sourcePadding: any;
    sourcePoint: any;
    sourcePoint_x: any;
    sourcePoint_y: any;
    sourcePort: any;
    targetDecorator: any;
    targetDecorator_borderColor: any;
    targetDecorator_cssClass: any;
    targetDecorator_fillColor: any;
    targetDecorator_height: any;
    targetDecorator_pathData: any;
    targetDecorator_shape: any;
    targetDecorator_width: any;
    targetNode: any;
    targetPadding: any;
    targetPoint: any;
    targetPort: any;
    tooltip: any;
    verticalAlign: any;
    visible: any;
    zOrder: any;
    tag_segments: any;
    tag_labels: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramConnectorsDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramNodeLabelDirective extends ComplexTagElement {
    bold: any;
    borderColor: any;
    borderWidth: any;
    cssClass: any;
    constraints: any;
    fillColor: any;
    fontColor: any;
    fontFamily: any;
    fontSize: any;
    height: any;
    horizontalAlignment: any;
    italic: any;
    margin: any;
    mode: any;
    name: any;
    offset: any;
    opacity: any;
    overflowType: any;
    padding: any;
    readOnly: any;
    rotateAngle: any;
    templateId: any;
    text: any;
    textAlign: any;
    textDecoration: any;
    textOverflow: any;
    verticalAlignment: any;
    visible: any;
    width: any;
    wrapping: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramNodeLabelsDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramPhaseDirective extends ComplexTagElement {
    label: any;
    lineColor: any;
    lineDashArray: any;
    lineWidth: any;
    name: any;
    offset: any;
    orientation: any;
    type: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramPhasesDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramPortDirective extends ComplexTagElement {
    borderColor: any;
    borderWidth: any;
    connectorPadding: any;
    constraints: any;
    cssClass: any;
    fillColor: any;
    name: any;
    offset: any;
    pathData: any;
    shape: any;
    size: any;
    visibility: any;
    parent: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramPortsDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramNodeDirective extends ComplexTagElement {
    activity: any;
    addInfo: any;
    annotation: any;
    annotation_angle: any;
    annotation_direction: any;
    annotation_height: any;
    annotation_length: any;
    annotation_text: any;
    annotation_width: any;
    borderColor: any;
    borderDashArray: any;
    borderWidth: any;
    canUngroup: any;
    children: any;
    classifier: any;
    class: any;
    class_name: any;
    class_attributes: any;
    class_methods: any;
    collapseIcon: any;
    collapseIcon_borderColor: any;
    collapseIcon_borderWidth: any;
    collapseIcon_fillColor: any;
    collapseIcon_height: any;
    collapseIcon_horizontalAlignment: any;
    collapseIcon_margin: any;
    collapseIcon_offset: any;
    collapseIcon_shape: any;
    collapseIcon_verticalAlignment: any;
    connectorPadding: any;
    constraints: any;
    container: any;
    container_orientation: any;
    container_type: any;
    cornerRadius: any;
    cssClass: any;
    data: any;
    data_type: any;
    data_collection: any;
    enumeration: any;
    enumeration_name: any;
    enumeration_members: any;
    event: any;
    excludeFromLayout: any;
    expandIcon: any;
    expandIcon_borderColor: any;
    expandIcon_borderWidth: any;
    expandIcon_fillColor: any;
    expandIcon_height: any;
    expandIcon_horizontalAlignment: any;
    expandIcon_margin: any;
    expandIcon_offset: any;
    expandIcon_shape: any;
    expandIcon_verticalAlignment: any;
    fillColor: any;
    gateway: any;
    gradient: any;
    gradient_LinearGradient: any;
    gradient_LinearGradient_stops: any;
    gradient_LinearGradient_type: any;
    gradient_LinearGradient_x1: any;
    gradient_LinearGradient_x2: any;
    gradient_LinearGradient_y1: any;
    gradient_LinearGradient_y2: any;
    gradient_RadialGradient: any;
    gradient_RadialGradient_type: any;
    gradient_RadialGradient_cx: any;
    gradient_RadialGradient_cy: any;
    gradient_RadialGradient_fx: any;
    gradient_RadialGradient_fy: any;
    gradient_RadialGradient_stops: any;
    gradient_Stop: any;
    gradient_Stop_color: any;
    gradient_Stop_offset: any;
    gradient_Stop_opacity: any;
    borderGradient: any;
    header: any;
    height: any;
    horizontalAlign: any;
    inEdges: any;
    interface: any;
    interface_name: any;
    interface_attributes: any;
    interface_methods: any;
    isExpanded: any;
    isSwimlane: any;
    labels: any;
    lanes: any;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    name: any;
    offsetX: any;
    offsetY: any;
    opacity: any;
    orientation: any;
    outEdges: any;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    paletteItem: any;
    paletteItem_enableScale: any;
    paletteItem_height: any;
    paletteItem_label: any;
    paletteItem_margin: any;
    paletteItem_previewHeight: any;
    paletteItem_previewWidth: any;
    paletteItem_width: any;
    parent: any;
    pathData: any;
    phases: any;
    phaseSize: any;
    pivot: any;
    points: any;
    ports: any;
    rotateAngle: any;
    shadow: any;
    shadow_angle: any;
    shadow_distance: any;
    shadow_opacity: any;
    shape: any;
    source: any;
    subProcess: any;
    subProcess_adhoc: any;
    subProcess_boundary: any;
    subProcess_compensation: any;
    subProcess_collapsed: any;
    subProcess_event: any;
    subProcess_events: any;
    subProcess_loop: any;
    subProcess_Processes: any;
    subProcess_trigger: any;
    subProcess_type: any;
    task: any;
    task_call: any;
    task_compensation: any;
    task_loop: any;
    task_type: any;
    task_events: any;
    templateId: any;
    textBlock: any;
    tooltip: any;
    trigger: any;
    type: any;
    verticalAlign: any;
    visible: any;
    width: any;
    zOrder: any;
    tag_labels: any;
    tag_phases: any;
    tag_ports: any;
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramNodesDirective extends ArrayTagElement<ComplexTagElement> {
    constructor(widget: EJComponents<any, any>);
}
export declare class DiagramComponent extends EJComponents<any, any> {
    el: ElementRef;
    cdRef: ChangeDetectorRef;
    private _ejIterableDiffers;
    private _ejkeyvaluediffers;
    backgroundColor_input: any;
    backgroundImage_input: any;
    bridgeDirection_input: any;
    commandManager_input: any;
    connectorTemplate_input: any;
    constraints_input: any;
    contextMenu_input: any;
    dataSourceSettings_input: any;
    defaultSettings_input: any;
    drawType_input: any;
    enableAutoScroll_input: any;
    enableContextMenu_input: any;
    height_input: any;
    historyManager_input: any;
    labelRenderingMode_input: any;
    layout_input: any;
    locale_input: any;
    nodeTemplate_input: any;
    pageSettings_input: any;
    scrollSettings_input: any;
    selectedItems_input: any;
    showTooltip_input: any;
    serializationSettings_input: any;
    rulerSettings_input: any;
    snapSettings_input: any;
    tool_input: any;
    tooltip_input: any;
    width_input: any;
    zoomFactor_input: any;
    backgroundImage_alignment_input: any;
    commandManager_commands_input: any;
    commandManager_commands_canExecute_input: any;
    commandManager_commands_execute_input: any;
    commandManager_commands_gesture_input: any;
    commandManager_commands_parameter_input: any;
    contextMenu_showCustomMenuItemsOnly_input: any;
    dataSourceSettings_dataSource_input: any;
    dataSourceSettings_id_input: any;
    dataSourceSettings_parent_input: any;
    dataSourceSettings_query_input: any;
    dataSourceSettings_root_input: any;
    dataSourceSettings_tableName_input: any;
    dataSourceSettings_crudAction_input: any;
    dataSourceSettings_crudAction_create_input: any;
    dataSourceSettings_crudAction_update_input: any;
    dataSourceSettings_crudAction_destroy_input: any;
    dataSourceSettings_crudAction_read_input: any;
    dataSourceSettings_customFields_input: any;
    dataSourceSettings_connectionDataSource_input: any;
    dataSourceSettings_connectionDataSource_dataSource_input: any;
    dataSourceSettings_connectionDataSource_id_input: any;
    dataSourceSettings_connectionDataSource_sourceNode_input: any;
    dataSourceSettings_connectionDataSource_targetNode_input: any;
    dataSourceSettings_connectionDataSource_sourcePointX_input: any;
    dataSourceSettings_connectionDataSource_sourcePointY_input: any;
    dataSourceSettings_connectionDataSource_targetPointX_input: any;
    dataSourceSettings_connectionDataSource_targetPointY_input: any;
    dataSourceSettings_connectionDataSource_crudAction_input: any;
    dataSourceSettings_connectionDataSource_customFields_input: any;
    defaultSettings_connector_input: any;
    defaultSettings_group_input: any;
    defaultSettings_node_input: any;
    historyManager_canPop_input: any;
    historyManager_closeGroupAction_input: any;
    historyManager_pop_input: any;
    historyManager_push_input: any;
    historyManager_redo_input: any;
    historyManager_redoStack_input: any;
    historyManager_stackLimit_input: any;
    historyManager_startGroupAction_input: any;
    historyManager_undo_input: any;
    historyManager_undoStack_input: any;
    layout_bounds_input: any;
    layout_fixedNode_input: any;
    layout_getLayoutInfo_input: any;
    layout_getConnectorSegments_input: any;
    layout_horizontalSpacing_input: any;
    layout_margin_input: any;
    layout_horizontalAlignment_input: any;
    layout_verticalAlignment_input: any;
    layout_orientation_input: any;
    layout_type_input: any;
    layout_verticalSpacing_input: any;
    layout_root_input: any;
    layout_springLength_input: any;
    layout_springFactor_input: any;
    layout_maxIteration_input: any;
    layout_avoidSegmentOverlapping_input: any;
    pageSettings_autoScrollBorder_input: any;
    pageSettings_multiplePage_input: any;
    pageSettings_pageBackgroundColor_input: any;
    pageSettings_pageBorderColor_input: any;
    pageSettings_pageBorderWidth_input: any;
    pageSettings_pageHeight_input: any;
    pageSettings_pageMargin_input: any;
    pageSettings_pageOrientation_input: any;
    pageSettings_pageWidth_input: any;
    pageSettings_scrollableArea_input: any;
    pageSettings_scrollLimit_input: any;
    pageSettings_boundaryConstraints_input: any;
    pageSettings_showPageBreak_input: any;
    scrollSettings_currentZoom_input: any;
    scrollSettings_horizontalOffset_input: any;
    scrollSettings_padding_input: any;
    scrollSettings_verticalOffset_input: any;
    scrollSettings_viewPortHeight_input: any;
    scrollSettings_viewPortWidth_input: any;
    selectedItems_children_input: any;
    selectedItems_constraints_input: any;
    selectedItems_getConstraints_input: any;
    selectedItems_height_input: any;
    selectedItems_offsetX_input: any;
    selectedItems_offsetY_input: any;
    selectedItems_rotateAngle_input: any;
    selectedItems_tooltip_input: any;
    selectedItems_width_input: any;
    serializationSettings_preventDefaultValues_input: any;
    rulerSettings_showRulers_input: any;
    rulerSettings_horizontalRuler_input: any;
    rulerSettings_horizontalRuler_interval_input: any;
    rulerSettings_horizontalRuler_segmentWidth_input: any;
    rulerSettings_horizontalRuler_arrangeTick_input: any;
    rulerSettings_horizontalRuler_tickAlignment_input: any;
    rulerSettings_horizontalRuler_markerColor_input: any;
    rulerSettings_horizontalRuler_length_input: any;
    rulerSettings_horizontalRuler_thickness_input: any;
    rulerSettings_verticalRuler_input: any;
    rulerSettings_verticalRuler_interval_input: any;
    rulerSettings_verticalRuler_segmentWidth_input: any;
    rulerSettings_verticalRuler_arrangeTick_input: any;
    rulerSettings_verticalRuler_tickAlignment_input: any;
    rulerSettings_verticalRuler_markerColor_input: any;
    rulerSettings_verticalRuler_length_input: any;
    rulerSettings_verticalRuler_thickness_input: any;
    snapSettings_enableSnapToObject_input: any;
    snapSettings_horizontalGridLines_input: any;
    snapSettings_horizontalGridLines_lineColor_input: any;
    snapSettings_horizontalGridLines_lineDashArray_input: any;
    snapSettings_horizontalGridLines_linesInterval_input: any;
    snapSettings_horizontalGridLines_snapInterval_input: any;
    snapSettings_snapAngle_input: any;
    snapSettings_snapConstraints_input: any;
    snapSettings_snapObjectDistance_input: any;
    snapSettings_verticalGridLines_input: any;
    snapSettings_verticalGridLines_lineColor_input: any;
    snapSettings_verticalGridLines_lineDashArray_input: any;
    snapSettings_verticalGridLines_linesInterval_input: any;
    snapSettings_verticalGridLines_snapInterval_input: any;
    tooltip_alignment_input: any;
    tooltip_alignment_horizontal_input: any;
    tooltip_alignment_vertical_input: any;
    tooltip_margin_input: any;
    tooltip_relativeMode_input: any;
    tooltip_templateId_input: any;
    connectors_input: any;
    nodes_input: any;
    layers_input: any;
    contextMenu_items_input: any;
    nodes_class_attributes_input: any;
    nodes_class_methods_input: any;
    nodes_enumeration_members_input: any;
    nodes_interface_attributes_input: any;
    nodes_interface_methods_input: any;
    nodes_subProcess_events_input: any;
    selectedItems_userHandles_input: any;
    options: any;
    autoScrollChange_output: EventEmitter<{}>;
    click_output: EventEmitter<{}>;
    ejclick_output: EventEmitter<{}>;
    connectionChange_output: EventEmitter<{}>;
    connectorCollectionChange_output: EventEmitter<{}>;
    connectorSourceChange_output: EventEmitter<{}>;
    connectorTargetChange_output: EventEmitter<{}>;
    contextMenuBeforeOpen_output: EventEmitter<{}>;
    contextMenuClick_output: EventEmitter<{}>;
    doubleClick_output: EventEmitter<{}>;
    drag_output: EventEmitter<{}>;
    dragEnter_output: EventEmitter<{}>;
    dragLeave_output: EventEmitter<{}>;
    dragOver_output: EventEmitter<{}>;
    drop_output: EventEmitter<{}>;
    editorFocusChange_output: EventEmitter<{}>;
    groupChange_output: EventEmitter<{}>;
    historyChange_output: EventEmitter<{}>;
    itemClick_output: EventEmitter<{}>;
    mouseEnter_output: EventEmitter<{}>;
    mouseLeave_output: EventEmitter<{}>;
    mouseOver_output: EventEmitter<{}>;
    nodeCollectionChange_output: EventEmitter<{}>;
    propertyChange_output: EventEmitter<{}>;
    rotationChange_output: EventEmitter<{}>;
    scrollChange_output: EventEmitter<{}>;
    segmentChange_output: EventEmitter<{}>;
    selectionChange_output: EventEmitter<{}>;
    sizeChange_output: EventEmitter<{}>;
    textChange_output: EventEmitter<{}>;
    create_output: EventEmitter<{}>;
    setTool_output: EventEmitter<{}>;
    tag_commandManager_commands: any;
    tag_connectors: any;
    tag_nodes: any;
    constructor(el: ElementRef, cdRef: ChangeDetectorRef, _ejIterableDiffers: IterableDiffers, _ejkeyvaluediffers: KeyValueDiffers);
}
export declare var EJ_DIAGRAM_COMPONENTS: Type<any>[];
