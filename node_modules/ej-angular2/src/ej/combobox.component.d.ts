import 'syncfusion-javascript/Scripts/ej/web/ej.combobox.min';
import { EJComponents } from './core';
import { EventEmitter, IterableDiffers, KeyValueDiffers, Type, ElementRef, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare const ComboBoxValueAccessor: any;
export declare class ComboBoxComponent extends EJComponents<any, any> implements ControlValueAccessor {
    el: ElementRef;
    cdRef: ChangeDetectorRef;
    private _ejIterableDiffers;
    private _ejkeyvaluediffers;
    actionFailureTemplate_input: any;
    allowCustom_input: any;
    allowFiltering_input: any;
    autofill_input: any;
    cssClass_input: any;
    dataSource_input: any;
    enableRtl_input: any;
    enabled_input: any;
    fields_input: any;
    footerTemplate_input: any;
    groupTemplate_input: any;
    headerTemplate_input: any;
    htmlAttributes_input: any;
    index_input: any;
    itemTemplate_input: any;
    locale_input: any;
    noRecordsTemplate_input: any;
    placeholder_input: any;
    popupHeight_input: any;
    popupWidth_input: any;
    query_input: any;
    readonly_input: any;
    showClearButton_input: any;
    sortOrder_input: any;
    text_input: any;
    width_input: any;
    fields_groupBy_input: any;
    fields_iconCss_input: any;
    fields_value_input: any;
    fields_text_input: any;
    options: any;
    value_two: any;
    value_twoChange: EventEmitter<any>;
    actionBegin_output: EventEmitter<{}>;
    actionComplete_output: EventEmitter<{}>;
    actionFailure_output: EventEmitter<{}>;
    change_output: EventEmitter<{}>;
    ejchange_output: EventEmitter<{}>;
    close_output: EventEmitter<{}>;
    create_output: EventEmitter<{}>;
    customValueSpecifier_output: EventEmitter<{}>;
    filtering_output: EventEmitter<{}>;
    focus_output: EventEmitter<{}>;
    open_output: EventEmitter<{}>;
    select_output: EventEmitter<{}>;
    constructor(el: ElementRef, cdRef: ChangeDetectorRef, _ejIterableDiffers: IterableDiffers, _ejkeyvaluediffers: KeyValueDiffers);
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
}
export declare var EJ_COMBOBOX_COMPONENTS: Type<any>[];
