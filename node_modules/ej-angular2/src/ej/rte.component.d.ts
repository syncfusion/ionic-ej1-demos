import 'syncfusion-javascript/Scripts/ej/web/ej.rte.min';
import { EJComponents } from './core';
import { EventEmitter, IterableDiffers, KeyValueDiffers, Type, ElementRef, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare const RTEValueAccessor: any;
export declare class RTEComponent extends EJComponents<any, any> implements ControlValueAccessor {
    el: ElementRef;
    cdRef: ChangeDetectorRef;
    private _ejIterableDiffers;
    private _ejkeyvaluediffers;
    allowEditing_input: any;
    allowKeyboardNavigation_input: any;
    autoFocus_input: any;
    autoHeight_input: any;
    pasteCleanupSettings_input: any;
    colorCode_input: any;
    colorPaletteColumns_input: any;
    colorPaletteRows_input: any;
    cssClass_input: any;
    enabled_input: any;
    enableHtmlEncode_input: any;
    enablePersistence_input: any;
    enableResize_input: any;
    enableRTL_input: any;
    enableXHTML_input: any;
    enableTabKeyNavigation_input: any;
    exportToPdfSettings_input: any;
    exportToWordSettings_input: any;
    externalCSS_input: any;
    fileBrowser_input: any;
    fontName_input: any;
    fontSize_input: any;
    format_input: any;
    height_input: any;
    htmlAttributes_input: any;
    iframeAttributes_input: any;
    imageBrowser_input: any;
    importSettings_input: any;
    isResponsive_input: any;
    locale_input: any;
    maxHeight_input: any;
    maxLength_input: any;
    maxWidth_input: any;
    minHeight_input: any;
    minWidth_input: any;
    name_input: any;
    showClearAll_input: any;
    showClearFormat_input: any;
    showCustomTable_input: any;
    showContextMenu_input: any;
    showDimensions_input: any;
    showFontOption_input: any;
    showFooter_input: any;
    showHtmlSource_input: any;
    showHtmlTagInfo_input: any;
    showToolbar_input: any;
    showCharCount_input: any;
    showRoundedCorner_input: any;
    showWordCount_input: any;
    tableColumns_input: any;
    tableRows_input: any;
    tools_input: any;
    toolsList_input: any;
    toolbarOverflowMode_input: any;
    tooltipSettings_input: any;
    undoStackLimit_input: any;
    validationRules_input: any;
    validationMessage_input: any;
    width_input: any;
    zoomStep_input: any;
    pasteCleanupSettings_listConversion_input: any;
    pasteCleanupSettings_cleanCSS_input: any;
    pasteCleanupSettings_removeStyles_input: any;
    pasteCleanupSettings_cleanElements_input: any;
    exportToPdfSettings_url_input: any;
    exportToPdfSettings_fileName_input: any;
    exportToWordSettings_url_input: any;
    exportToWordSettings_fileName_input: any;
    fileBrowser_ajaxAction_input: any;
    fileBrowser_extensionAllow_input: any;
    fileBrowser_filePath_input: any;
    imageBrowser_ajaxAction_input: any;
    imageBrowser_extensionAllow_input: any;
    imageBrowser_filePath_input: any;
    importSettings_url_input: any;
    tools_alignment_input: any;
    tools_casing_input: any;
    tools_clear_input: any;
    tools_clipboard_input: any;
    tools_edit_input: any;
    tools_doAction_input: any;
    tools_effects_input: any;
    tools_font_input: any;
    tools_formatStyle_input: any;
    tools_images_input: any;
    tools_indenting_input: any;
    tools_links_input: any;
    tools_lists_input: any;
    tools_media_input: any;
    tools_style_input: any;
    tools_tables_input: any;
    tools_view_input: any;
    tools_print_input: any;
    tools_importExport_input: any;
    tools_customOrderedList_input: any;
    tools_customUnorderedList_input: any;
    options: any;
    value_two: any;
    value_twoChange: EventEmitter<any>;
    change_output: EventEmitter<{}>;
    ejchange_output: EventEmitter<{}>;
    create_output: EventEmitter<{}>;
    contextMenuClick_output: EventEmitter<{}>;
    destroy_output: EventEmitter<{}>;
    execute_output: EventEmitter<{}>;
    keydown_output: EventEmitter<{}>;
    keyup_output: EventEmitter<{}>;
    preRender_output: EventEmitter<{}>;
    select_output: EventEmitter<{}>;
    constructor(el: ElementRef, cdRef: ChangeDetectorRef, _ejIterableDiffers: IterableDiffers, _ejkeyvaluediffers: KeyValueDiffers);
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
}
export declare var EJ_RTE_COMPONENTS: Type<any>[];
